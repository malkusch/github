name: Build
on:
  workflow_call:
    inputs:
      JDK_VERSION:
        type: string
        required: false
      JDK_DISTRIBUTION:
        type: string
        default: temurin
      BUILD_TARGETS:
        type: string
        default: package
      ALLOW_PRIVILEGED_PORT:
        type: number
        required: false
      WORKING_DIRECTORY:
        type: string
        default: .
        required: false
      INTEGRATION_TESTS_ENABLED:
        type: boolean
        default: true
      UNIT_TESTS_ENABLED:
        type: boolean
        default: true
    outputs:
      JDK_VERSION:
        value: ${{ jobs.jdk_version.outputs.JDK_VERSION }}
      jar:
        value: ${{ jobs.build.outputs.jar }}

env:
  TARGET_PATH: ${{ inputs.WORKING_DIRECTORY }}/target

jobs:
  jdk_version:
    env:
      JDK_VERSION: ${{ inputs.JDK_VERSION }}
    outputs:
      JDK_VERSION: ${{ steps.result.outputs.JDK_VERSION }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - if: ${{ ! env.JDK_VERSION }}
        uses: actions/checkout@v4
      - if: ${{ ! env.JDK_VERSION }}
        id: Detect
        uses: YunaBraska/java-info-action@2.1.4
        with:
          jv-fallback: 1
          work-dir: ${{ inputs.WORKING_DIRECTORY }}
        
      - if: ${{ ! env.JDK_VERSION }}
        name: Detected
        run: echo "JDK_VERSION=${{ steps.detect.outputs.java_version }}" >> $GITHUB_ENV
        
      - if: ${{ ! env.JDK_VERSION || env.JDK_VERSION <= 5 }}
        name: Not Detected
        run: |
          echo "::error file={name},line={line},endLine={endLine},title={title}::Could not detect JDK (was $JDK_VERSION)"
          exit 1
    
      - id: result
        name: Result ${{ env.JDK_VERSION }}
        run: echo "JDK_VERSION=$JDK_VERSION" >> $GITHUB_OUTPUT
        
  build:
    runs-on: ubuntu-latest
    needs: [jdk_version]
    env:
      JDK_VERSION: ${{ needs.jdk_version.outputs.JDK_VERSION }}
    outputs:
      jar: ${{ steps.setJar.outputs.jar }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JDK_VERSION }}
        distribution: ${{ inputs.JDK_DISTRIBUTION }}
        cache: maven
    - name: Build jar
      run: mvn --batch-mode --update-snapshots clean ${{ inputs.BUILD_TARGETS }} -Dmaven.test.skip
    - name: Set JAR_NAME
      run: |
        JAR_NAME=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout).jar
        echo "JAR_NAME=$JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
    - name: Save jar
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.JAR_NAME }}
        path: ${{ env.TARGET_PATH }}/${{ env.JAR_NAME }}
        retention-days: 1
    - id: setJar
      run: echo "jar=$JAR_NAME" >> $GITHUB_OUTPUT
    - name: Build Tests
      run: mvn --batch-mode test-compile
    - name: Save target
      uses: actions/upload-artifact@v4
      with:
        name: target
        path: ${{ env.TARGET_PATH }}
        retention-days: 1

  unit-tests:
    if: ${{ inputs.UNIT_TESTS_ENABLED }}
    runs-on: ubuntu-latest
    needs: [build, jdk_version]
    env:
      JDK_VERSION: ${{ needs.jdk_version.outputs.JDK_VERSION }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ inputs.JDK_DISTRIBUTION }}
          cache: maven
      - name: Restore target
        uses: actions/download-artifact@v4
        with:
            name: target
            path: ${{ env.TARGET_PATH }}
      - name: Allow privileged port
        if: ${{ inputs.ALLOW_PRIVILEGED_PORT }}
        run: sudo sysctl net.ipv4.ip_unprivileged_port_start=${{ inputs.ALLOW_PRIVILEGED_PORT }}
      - name: Test
        run: mvn --batch-mode test
      - name: Publish Test Report
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Unit Tests
          fail_if_no_tests: true
          fail_on_test_failures: true
          file_name_in_stack_trace: true

  integration-tests:
    if: ${{ inputs.INTEGRATION_TESTS_ENABLED }}
    runs-on: ubuntu-latest
    needs: [build, jdk_version]
    env:
      JDK_VERSION: ${{ needs.jdk_version.outputs.JDK_VERSION }}
    defaults:
      run:
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ inputs.JDK_DISTRIBUTION }}
          cache: maven
      - name: Restore target
        uses: actions/download-artifact@v4
        with:
            name: target
            path: ${{ env.TARGET_PATH }}
      - name: Set Environment variables
        uses: oNaiPs/secrets-to-env-action@v1.5
        with:
            secrets: ${{ toJSON(secrets) }}
      - name: Allow privileged port
        if: ${{ inputs.ALLOW_PRIVILEGED_PORT }}
        run: sudo sysctl net.ipv4.ip_unprivileged_port_start=${{ inputs.ALLOW_PRIVILEGED_PORT }}
      - name: Test
        run: mvn --batch-mode failsafe:integration-test failsafe:verify -Dskip.surefire.tests
      - name: Publish Test Report
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Integration Tests
          fail_if_no_tests: true
          fail_on_test_failures: true
          file_name_in_stack_trace: true
